use clap::{Arg, ArgMatches, Command as ClapCommand};

pub fn parse_args() -> ArgMatches {
    ClapCommand::new("arrayify")
        .version("0.2.0")
        .author("Sam Dougan")
        .about("Submits and checks bsub job arrays from a CSV file or directory")
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(
            ClapCommand::new("sub")
                .about("Submit job array from CSV or directory")
                .arg(Arg::new("csv")
                    .short('s')
                    .long("csv")
                    .value_name("CSV_FILE")
                    .help("Path to the CSV file")
                    .conflicts_with("dir")
                    .required_unless_present("dir"))
                .arg(Arg::new("dir")
                    .short('d')
                    .long("dir")
                    .value_name("DIRECTORY")
                    .help("Path to the input directory")
                    .conflicts_with("csv")
                    .required_unless_present("csv"))
                .arg(Arg::new("command")
                    .short('c')
                    .long("command")
                    .value_name("COMMAND_TEMPLATE")
                    .help("Command template with placeholders for CSV headers (e.g., 'echo {ID} {R1} {R2}') must be quoted")
                    .required(true))
                .arg(Arg::new("log")
                    .short('l')
                    .long("log")
                    .value_name("LOG_DIR")
                    .help("Path to the log directory")
                    .default_value("logs"))
                .arg(Arg::new("memory")
                    .short('m')
                    .long("memory")
                    .value_name("MEMORY_GB")
                    .help("Memory per job in GB")
                    .default_value("1"))
                .arg(Arg::new("threads")
                    .short('t')
                    .long("threads")
                    .value_name("THREADS")
                    .help("Threads per job")
                    .default_value("1"))
                .arg(Arg::new("batch_size")
                    .short('b')
                    .long("batch")
                    .value_name("BATCH_SIZE")
                    .help("Batch size of actively running jobs normally signified by %N (default: 20% of the array)")
                    .default_value("auto")))
        .subcommand(
            ClapCommand::new("check")
                .about("Check job status by job ID")
                .arg(Arg::new("job_id")
                    .value_name("JOB_ID")
                    .help("LSF Job ID to check")
                    .required(true)))
        .get_matches()
}
